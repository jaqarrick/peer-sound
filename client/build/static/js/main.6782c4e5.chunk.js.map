{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputContainer","styled","div","App","useState","peerData","setPeerData","handleUpload","useCallback","event","a","files","target","formData","FormData","append","fetch","method","body","response","json","obj","JSON","parse","scoreData","setScoreData","useEffect","IPs","map","ip","MonoSynth","oscillator","type","toDestination","peers","peer","split","ipArray","ipPart","Number","ports","port","console","log","ID","transactionId","toString","className","css","name","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wlBAUA,IAAMA,EAAiBC,IAAOC,IAAV,KA8ELC,MA1Ef,WAAgB,IAAD,EACkBC,mBAAkC,MADpD,mBACPC,EADO,KACGC,EADH,KAERC,EAAeC,sBAAW,uCAC/B,WAAOC,GAAP,uBAAAC,EAAA,6DACOC,EAAyBF,EAAMG,OAAOD,MACtCE,EAAqB,IAAIC,SAC3BH,GAAOE,EAASE,OAAO,UAAWJ,EAAM,IAH7C,SAKwBK,MAAM,UAAW,CACvCC,OAAQ,OACRC,KAAML,IAPR,cAKOM,EALP,gBASoBA,EAASC,OAT7B,OASOA,EATP,OAUOC,EAAwBC,KAAKC,MAAMH,GACzCd,EAAYe,GAXb,4CAD+B,sDAc/B,CAACf,IAhBY,EAkBcF,qBAlBd,gCAmBoBA,sBAnBpB,mBAmBPoB,EAnBO,KAmBIC,EAnBJ,KAqBdC,qBAAU,WACG,OAAGF,QAAH,IAAGA,KAAWG,IAAIC,KAAI,SAACC,GACVA,EAAG,GAG3B,OAAO,IAAIC,IAAU,CACpBC,WAAY,CACXC,KAAM,gBAELC,qBAEF,CAACT,IACJE,qBAAU,WAAO,IAAD,EACTC,EAEO,OAAGtB,QAAH,IAAGA,OAAH,EAAGA,EAAU6B,MACxBN,KAAI,SAACO,GAAD,OAAuBA,EAAKN,GAAGO,MAAM,QACzCR,KAAI,SAACS,GAAD,OACJA,EAAQT,KAAI,SAACU,GAAD,OAAoBC,OAAOD,SAEnCE,EAA2B,OAAGnC,QAAH,IAAGA,OAAH,EAAGA,EAAU6B,MAAMN,KACnD,SAACO,GAAD,OAAuBA,EAAKM,QAE7BC,QAAQC,IAAIhB,EAAKa,GACjB,IAAMI,EAAwB,OAAGvC,QAAH,IAAGA,GAAH,UAAGA,EAAUwC,qBAAb,aAAG,EAC9BC,WACDV,MAAM,IACNR,IAAIW,QACFZ,GAAOa,GAASI,GACnBnB,EAAa,CAAEE,MAAKa,QAAOI,SAE1B,CAACvC,IApDU,MAsDwBD,mBAAiC,MAtDzD,mBAwDd,OAxDc,UAuDdsB,qBAAU,kBAAMgB,QAAQC,IAAItC,KAAW,CAACA,IAEvC,qBAAK0C,UAAU,MAAf,SACC,cAAC/C,EAAD,CACC+C,UACC1C,EACG2C,YADK,KAILA,YAJK,KAFV,SAUC,uBAAOhB,KAAK,OAAOiB,KAAK,UAAUC,SAAU3C,SCpEjC4C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6782c4e5.chunk.js","sourcesContent":["import React, { ChangeEvent, useCallback, useState, useEffect } from \"react\"\nimport \"./App.css\"\nimport { AnnounceResponse, PeersObject } from \"../../types/Torrent\"\nimport styled from \"@emotion/styled\"\n// import {css, jsx} from '@emotion/react'\nimport { css } from \"@emotion/css\"\nimport { ToneAudioNode, MonoSynth } from \"tone\"\nimport { ScoreData } from \"../../types/Score\"\nimport wavetypes from \"./utils/Wavetypes\"\n\nconst InputContainer = styled.div`\n\tborder: solid red 1px;\n`\n\nfunction App() {\n\tconst [peerData, setPeerData] = useState<AnnounceResponse | null>(null)\n\tconst handleUpload = useCallback(\n\t\tasync (event: ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst files: FileList | null = event.target.files\n\t\t\tconst formData: FormData = new FormData()\n\t\t\tif (files) formData.append(\"torrent\", files[0])\n\n\t\t\tconst response = await fetch(\"/upload\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: formData,\n\t\t\t})\n\t\t\tconst json = await response.json()\n\t\t\tconst obj: AnnounceResponse = JSON.parse(json)\n\t\t\tsetPeerData(obj)\n\t\t},\n\t\t[setPeerData]\n\t)\n\tconst [voices, setVoices] = useState<any>()\n\tconst [scoreData, setScoreData] = useState<ScoreData>()\n\n\tuseEffect(() => {\n\t\tconst synths = scoreData?.IPs.map((ip: number[]) => {\n\t\t\tconst isEven: boolean = ip[0] % 2 === 0\n\n\t\t\t//set the wavetype equal either a random string from wavetypes\n\t\t\treturn new MonoSynth({\n\t\t\t\toscillator: {\n\t\t\t\t\ttype: \"triangle15\",\n\t\t\t\t},\n\t\t\t}).toDestination()\n\t\t})\n\t}, [scoreData])\n\tuseEffect(() => {\n\t\tconst IPs:\n\t\t\t| undefined\n\t\t\t| number[][] = peerData?.peers\n\t\t\t.map((peer: PeersObject) => peer.ip.split(\".\"))\n\t\t\t.map((ipArray: string[]) =>\n\t\t\t\tipArray.map((ipPart: string) => Number(ipPart))\n\t\t\t)\n\t\tconst ports: number[] | undefined = peerData?.peers.map(\n\t\t\t(peer: PeersObject) => peer.port\n\t\t)\n\t\tconsole.log(IPs, ports)\n\t\tconst ID: number[] | undefined = peerData?.transactionId\n\t\t\t?.toString()\n\t\t\t.split(\"\")\n\t\t\t.map(Number)\n\t\tif (IPs && ports && ID) {\n\t\t\tsetScoreData({ IPs, ports, ID })\n\t\t}\n\t}, [peerData])\n\n\tconst [instruments, setInstruments] = useState<ToneAudioNode[] | null>(null)\n\tuseEffect(() => console.log(peerData), [peerData])\n\treturn (\n\t\t<div className='App'>\n\t\t\t<InputContainer\n\t\t\t\tclassName={\n\t\t\t\t\tpeerData\n\t\t\t\t\t\t? css`\n\t\t\t\t\t\t\t\tdisplay: none;\n\t\t\t\t\t\t  `\n\t\t\t\t\t\t: css`\n\t\t\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\t  `\n\t\t\t\t}>\n\t\t\t\t<input type='file' name='torrent' onChange={handleUpload} />\n\t\t\t</InputContainer>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}